// plugin 설정 : JAVA, WAR(JAVA-WEB)
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

// JAVA Version 1.6
sourceCompatibility = 1.6
// 개발한 애플리케이션 버전
version = '1.0'

// 의존성 설정에 사용할 프로퍼티
springVersion = '3.1.1.RELEASE'
springIntegrationVersion = '2.1.1.RELEASE'
springSecurityVersion = '3.1.3.RELEASE'
logBackVersion = '1.0.6'
aspectVersion = '1.6.12'
slf4jVersion = '1.6.4'
injectVersion = '1'
servletVersion = '2.5'
jspApiVersion = '2.2.1-b03'
jstlVersion = '1.2'

// 메이븐 Central 저장소 사용
repositories {
    mavenCentral()
    maven {
	url "http://maven.springframework.org/milestone"
    }
}

// 의존성 설정
dependencies {
  compile 'org.springframework.integration:spring-integration-core:$springIntegrationVersion'
  compile 'org.springframework.integration:spring-integration-mail:$springIntegrationVersion'
  compile 'org.springframework:spring-context:$springVersion'
  compile 'org.springframework:spring-webmvc:$springVersion'
  compile 'org.springframework:spring-core:$springVersion'
  compile 'org.springframework:spring-expression:$springVersion'
  compile 'org.springframework:spring-beans:$springVersion'
  compile 'org.springframework:spring-aop:$springVersion'
  compile 'org.springframework:spring-context-support:$springVersion'
  compile 'org.springframework:spring-tx:$springVersion'
  compile 'org.springframework:spring-jdbc:$springVersion'
  compile 'org.springframework:spring-orm:$springVersion'
  compile 'org.springframework:spring-oxm:$springVersion'
  compile 'org.springframework:spring-web:$springVersion'
  compile 'org.springframework.security:spring-security-core:$springSecurityVersion'
  compile 'org.springframework.security:spring-security-config:$springSecurityVersion'
  compile 'org.springframework.security:spring-security-acl:$springSecurityVersion'
  compile 'org.springframework.security:spring-security-web:$springSecurityVersion'
  compile 'org.springframework.security:spring-security-crypto:$springSecurityVersion'
  compile 'org.springframework.security:spring-security-taglibs:$springSecurityVersion'
  complie 'org.aspectj:aspectjrt:$aspectVersion'
  complie 'org.aspectj:aspectjweaver:$aspectVersion'
  complie 'org.slf4j:slf4j-api:$slf4jVersion'
  complie 'org.slf4j:jcl-over-slf4j:$slf4jVersion'
  complie 'org.slf4j:slf4j-log4j12:$slf4jVersion'
  complie 'javax.inject:javax.inject:$injectVersion'
  complie 'javax.servlet:servlet-api:$servletVersion'
  complie 'javax.servlet.jsp:jsp-api:jspApiVersion'
  complie 'javax.servlet.jsp:jstl:jstlVersion'
  compile 'cglib:cglib-nodep:2.2.2'
  compile 'ch.qos.logback:logback-classic:1.0.6'

    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    testcompile 'org.springframework:spring-test:$springVersion',
                'junit:junit:4.+',
                'org.mockito:mockito-core:1.9.0'
}

// logback(slf4j)를 사용하기 때문에 모든 의존성에서 commons-logging는 제외
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

// JAVA 컴파일시 인코딩 설정
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// TEST 설정
test {
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    testReport = false
}

// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
task initProject(description: 'initialize project') << {
    createDir = {
        println "create source directory: $it"
        it.mkdirs()
    }
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, '/WEB-INF')
}